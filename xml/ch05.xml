<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="ch05">
  <title>Walkthrough: Dart Chat</title>

  <para>This chapter points out some of the useful and fun features of Dart
  that we used to build Dart Chat, a client-server app. If you’d like
  step-by-step instructions on building Dart Chat, you might be interested in
  our <ulink
  url="https://www.dartlang.org/slides/2012/06/io12/Bullseye-Your-first-Dart-app-Codelab-GoogleIO2012.pdf">code
  lab</ulink>.</para>

  <para><xref linkend="DartChat-screenshot" /> shows the chat client executing
  in a Dartium window. Each copy of the chat client can send messages to the
  chat server, which forwards those messages to the other chat clients.</para>

  <figure id="DartChat-screenshot">
    <title>Multiple chat clients can use the chat server to talk</title>

    <mediaobject>
      <imageobject>
        <imagedata fileref="../figs/incoming/0501_DartChat-screenshot.png"
                   format="PNG" scale="100" />
      </imageobject>
    </mediaobject>
  </figure>

  <sect1 id="ch05-how-to-run">
    <title>How to run Dart Chat</title>

    <para>The easiest way to run the Dart Chat client and server apps is to
    open them in Dart Editor.</para>

    <orderedlist>
      <listitem>
        <simpara>Download the Dart Chat source code from GitHub:</simpara>

        <simpara><ulink
        url="https://github.com/dart-lang/io-2012-dart-code-lab"></ulink></simpara>
      </listitem>

      <listitem>
        <simpara>In Dart Editor, use <emphasis role="bold">File &gt; Open
        Folder...</emphasis>, to open the <emphasis
        role="bold">finished</emphasis> directory of the Dart Chat source
        code.</simpara>
      </listitem>

      <listitem>
        <simpara>Select <literal>chat-server.dart</literal>, and then click
        the Run button <inlinemediaobject>
            <imageobject>
              <imagedata fileref="../figs/incoming/run.png" width="0.12in" />
            </imageobject>
          </inlinemediaobject>.</simpara>

        <simpara>A view named chat-server appears in Dart Editor, displaying
        debugging output for the server.</simpara>
      </listitem>

      <listitem>
        <simpara>Select <literal>client/chat-client.dart</literal>, and then
        click the Run button <inlinemediaobject>
            <imageobject>
              <imagedata fileref="../figs/incoming/run.png" width="0.12in" />
            </imageobject>
          </inlinemediaobject>.</simpara>

        <simpara>Dartium launches, if necessary, and displays a Dart Chat
        tab.</simpara>
      </listitem>

      <listitem>
        <simpara>To create another copy of the chat client, go to the Dart
        Chat tab in Dartium. Right-click the tab, and choose <emphasis
        role="bold">Duplicate</emphasis>.</simpara>
      </listitem>
    </orderedlist>
  </sect1>

  <sect1 id="ch05-how-it-works">
    <title>How Dart Chat works</title>

    <para>The chat server and client are simple. The chat server is an HTTP
    server that provides a WebSocket. The chat client uses that WebSocket for
    a bi-directional communication channel with the server. The client sends
    chat messages to the sever over the WebSocket, and the server relays those
    messages to all other connected clients.</para>

    <para>As <xref linkend="web-socket-connections" /> shows, the server
    starts things off by listening for requests to
    <literal>ws://127.0.0.1:1337/ws</literal>. Chat clients then connect to
    that URL.</para>

    <figure id="web-socket-connections">
      <title>Chat clients connect to a web socket created by the chat
      server</title>

      <mediaobject>
        <imageobject>
          <imagedata fileref="../figs/incoming/0502_web-socket-connections.png"
                     format="PNG" width="4.8in" />
        </imageobject>
      </mediaobject>
    </figure>

    <para>The real communication between client and server happens when the
    user enters a message. As <xref linkend="web-socket-messages" /> shows,
    the chat client sends a JSON-encoded version of the message to the server.
    The server then forwards the message to every client except the one that
    sent it.</para>

    <figure id="web-socket-messages">
      <title>A chat client uses the server to send a message to other chat
      clients</title>

      <mediaobject>
        <imageobject>
          <imagedata fileref="../figs/incoming/0503_web-socket-messages.png"
                     format="PNG" width="4.8in" />
        </imageobject>
      </mediaobject>
    </figure>

    <para>The chat server implements an HTTP server to listen for WebSocket
    requests. The HTTP server can also serve static files from the client
    directory—for example, http://127.0.0.1:1337/chat-log.txt shows the file
    that’s at client/chat-log.txt.</para>

    <para>The client code is split between HTML (page structure), CSS (page
    look), and JavaScript (logic and behavior). That’s typical of web
    clients.</para>

    <para>The twist is that this client’s JavaScript code is produced from
    Dart code, thanks to the dart2js compiler. Any modern browser can run this
    JavaScript code. Dartium (and any other browsers that support Dart) can
    run either the JavaScript code or the original Dart code.</para>
  </sect1>

  <sect1 id="ch05-client-html-code">
    <title>The client’s HTML code</title>

    <para>The main elements in the client UI are two text fields (with the IDs
    “chat-username” and “chat-message”) and a status area (ID:
    “chat-display”).</para>

    <programlisting>&lt;!-- In client/index.html: --&gt;
&lt;textarea id="chat-display" rows="10" disabled&gt;&lt;/textarea&gt;
...
&lt;input id="chat-username" name="chat-username" type="text"&gt;
...
&lt;input id="chat-message" name="chat-message" type="text" disabled value="enter message..."&gt;      </programlisting>

    <para>Near the bottom of client/index.html, a couple of &lt;script&gt;
    tags tell the browser to execute the client’s Dart or JavaScript
    code:</para>

    <programlisting>&lt;script type="application/dart" src="chat-client.dart"&gt;&lt;/script&gt;
&lt;script src="dart.js"&gt;&lt;/script&gt;      </programlisting>

    <para>The first line works in browsers that have an embedded Dart VM and
    so can execute Dart code; currently, only Dartium qualifies. The second
    line is important for every other browser. It executes dart.js, which is a
    standard script that converts all Dart &lt;script&gt; tags to use
    foo.dart.js instead of foo.dart, with the assumption that foo.dart.js is a
    JavaScript version of foo.dart. For non-Dartium browsers, dart.js changes
    the first &lt;script&gt; tag to the following:</para>

    <programlisting>&lt;!-- Inserted by dart.js for non-Dartium browsers --&gt;
&lt;script src="chat-client.dart.js"&gt;&lt;/script&gt;      </programlisting>

    <para>The script contents run when the browser has loaded the HTML and
    constructed its DOM (document object model).</para>

    <para>You can get <ulink
    url="http://dart.googlecode.com/svn/trunk/dart/client/dart.js">dart.js</ulink>
    from the Dart project. See <xref linkend="ch04-tools-dart2js" /> for more
    information about compiling Dart code into its JavaScript
    equivalent.</para>
  </sect1>

  <sect1 id="ch05-client-dart-code">
    <title>The client’s Dart code</title>

    <para>Dart code (client/chat-client.dart) provides the client’s logic,
    using the DOM to interact with UI elements. For example, the client’s Dart
    code uses the DOM to find the text area where the client displays
    messages.</para>

    <sect2>
      <title>Finding DOM elements</title>

      <para>The client app uses dart:html’s top-level query() method to get
      the client’s UI elements from the DOM.</para>

      <programlisting>// In client/chat-client.dart:
import 'dart:html';
//...
TextAreaElement chatElem = query('#chat-display');
InputElement usernameElem = query('#chat-username');
InputElement messageElem = query('#chat-message');   </programlisting>

      <para>The query() method uses a selector string that identifies an
      element in the DOM. See <xref linkend="ch03-finding-elements" /> for
      more about selectors.</para>
    </sect2>

    <sect2>
      <title>Wrapping DOM elements</title>

      <para>Rather than always dealing with DOM APIs, the chat client wraps
      the elements in Dart objects:</para>

      <programlisting>chatWindow = new ChatWindow(chatElem);
usernameInput = new UsernameInput(usernameElem);
messageInput = new MessageInput(messageElem);    </programlisting>

      <para>ChatWindow, UsernameInput, and MessageInput are custom classes
      that extend another custom class called View. These Views effectively
      separate the DOM manipulation from the application logic.</para>

      <para>Because Dart has real classes and inheritance, it’s simple to
      express the relationship that ChatWindow is-a View. Here’s the complete
      code for UsernameInput:</para>

      <programlisting>class UsernameInput extends View&lt;InputElement&gt; {
  UsernameInput(InputElement elem) : super(elem);

  bind() { // Called by the View constructor.
    elem.on.change.add((e) =&gt; _onUsernameChange());
  }

  _onUsernameChange() {
    if (!elem.value.isEmpty()) {
      messageInput.enable();
    } else {
      messageInput.disable();
    }
  }

  String get username =&gt; elem.value;
}    </programlisting>

      <para>To get the string that’s in the chat-username field, the client
      app uses the <literal>username</literal> getter of a UsernameInput
      object. For example:</para>

      <programlisting>chatWindow.displayMessage(message, usernameInput.username);</programlisting>

      <para>Notice how the code uses generics (View&lt;InputElement&gt;) to
      specify what kind of element the View class can encapsulate. In the
      preceding example, the UsernameInput wraps an <ulink
      url="http://api.dartlang.org/dart_html/InputElement.html">InputElement.</ulink>
      Expressing this gives tools information that they can use to identify
      bugs or improve code completion.</para>

      <para>Wrapping elements is a technique you can use as you develop a
      simple app that might evolve into a larger app. As the app grows, you
      might change it to use a real <ulink
      url="http://en.wikipedia.org/wiki/Model-view-controller">model-view-controller
      (MVC) architecture.</ulink></para>

      <note>
        <para>We expect the Dart project to provide an MVC-type framework for
        clients.</para>
      </note>
    </sect2>

    <sect2>
      <title>Updating DOM elements</title>

      <para>The bind() method sets up the event handlers, which bind events
      from the DOM to logic in the Dart objects. For example, in
      UsernameInput, the _onUsernameChange() method is called any time the
      text in the input element changes.</para>

      <para>To display messages in the chat window, the ChatWindow class adds
      the message to the text node of the text area.</para>

      <programlisting>class ChatWindow extends View&lt;TextAreaElement&gt; {
  ChatWindow(TextAreaElement elem) : super(elem);
  
  displayMessage(String msg, String from) {
    _display('$from: $msg\n');
  }
  
  displayNotice(String notice) {
    _display('[system]: $notice\n');
  }
  
  _display(String str) {
    elem.addText(str);
  }
}       </programlisting>

      <para>In both examples, the View objects expose an application-specific
      API—for example, displayMessage() or _onUsernameChange()—and encapsulate
      the manipulation of DOM elements.</para>
    </sect2>

    <sect2 id="ch05-dart-json">
      <title>Encoding and decoding messages</title>

      <para>The dart:json library encodes and decodes JSON-formatted messages.
      JSON is an easy way to provide string message data to WebSockets. Using
      JSON also gives a bit of structure to the messages and leaves the door
      open to creating more detailed messages in the future.</para>

      <para>The stringify() method converts a Dart object to a JSON encoded
      string, and the parse() method converts a JSON string back into a Dart
      object. Here’s the JSON-related code from the chat client:</para>

      <programlisting>import 'dart:json';

var encoded = JSON.stringify({'f': from, 'm': message});
Map message = JSON.parse(encodedMessage);     </programlisting>

      <para>See <xref linkend="ch03-json" /> for more information.</para>
    </sect2>

    <sect2>
      <title>Communicating with WebSockets</title>

      <para>The custom class ChatConnection takes care of the chat client’s
      WebSocket communication. First it connects to the WebSocket by calling
      the WebSocket constructor with the argument
      <literal>'ws://127.0.0.1:1337/ws'</literal>. Then ChatConnection adds
      event handlers for open, close, error, and message events, using the
      WebSocketEvents object it gets from webSocket.on. For example, here’s
      the code that responds to message events:</para>

      <programlisting>webSocket.on.message.add((MessageEvent e) {
  print('received message ${e.data}');
  _receivedEncodedMessage(e.data);
});      </programlisting>

      <para>The _receivedEncodedMessage() method just parses the JSON data and
      displays it in the status area.</para>

      <programlisting>_receivedEncodedMessage(String encodedMessage) {
  Map message = JSON.parse(encodedMessage);
  if (message['f'] != null) {
    chatWindow.displayMessage(message['m'], message['f']);
  }
}      </programlisting>

      <para>To send a message on the WebSocket connection,
      _sendEncodedMessage() ensures the WebSocket connection is ready and then
      sends the JSON encoded message.</para>

      <programlisting>// In the ChatConnection class:
send(String from, String message) {
  var encoded = JSON.stringify({'f': from, 'm': message});
  _sendEncodedMessage(encoded);
}

_sendEncodedMessage(String encodedMessage) {
  if (webSocket != null &amp;&amp; webSocket.readyState == WebSocket.OPEN) {
    webSocket.send(encodedMessage);
  } else {
    print('WebSocket not connected, message $encodedMessage not sent');
  }
}    </programlisting>

      <para>In the event of a connection problem, the client code attempts to
      reconnect to the WebSocket server. The following code takes advantage of
      Dart’s nested functions, nesting the scheduleReconnect() function inside
      of _init(). Dart’s lexical scoping ensures that scheduleReconnect() can
      see variables from _init().</para>

      <programlisting>_init([int retrySeconds = 2]) {
  bool encounteredError = false;
  chatWindow.displayNotice('Connecting to Web socket');
  webSocket = new WebSocket(url);
  
  scheduleReconnect() {
    chatWindow.displayNotice('web socket closed, retrying in $retrySeconds seconds');
    if (!encounteredError) {
      window.setTimeout(() =&gt; _init(retrySeconds*2), 1000*retrySeconds);
    }
    encounteredError = true;
  }
  
  //...
  
  webSocket.on.close.add((e) =&gt; scheduleReconnect());
  webSocket.on.error.add((e) =&gt; scheduleReconnect());      </programlisting>

      <para>The reconnect logic uses setTimeout() to schedule a retry using an
      exponential backoff algorithm.</para>
    </sect2>
  </sect1>

  <sect1 id="ch05-server">
    <title>The server’s code</title>

    <para>The chat-server.dart file contains most of the code used in the chat
    server. It is responsible for serving static files and managing WebSocket
    connections. The chat server also logs the chat messages to a file.</para>

    <sect2>
      <title>Serving static files</title>

      <para>The chat server uses dart:io’s HttpServer to implement a web
      server. The default request handler is configured to serve static files
      from a specific directory on the file system.</para>

      <programlisting>runServer(String basePath, int port) {
  HttpServer server = new HttpServer();  
  server.defaultRequestHandler = new StaticFileHandler(basePath).onRequest;
  //...
  server.onError = (error) =&gt; print(error);
  server.listen('127.0.0.1', 1337);
  print('listening for connections on $port');
}

main() {
  var script = new File(new Options().script);
  var directory = script.directorySync();
  runServer('${directory.path}/client', 1337);
}      </programlisting>

      <para>The StaticFileHandler first gets the file contents using File and
      InputStream, and then sends the contents using OutputStream.</para>

      <para>Because I/O can cause delays, due to variable network or disk
      bandwidth conditions, the chat server uses asynchronous I/O to handle
      HTTP requests while still being responsive to other requests. Each I/O
      request returns a Future, allowing the server to continue executing
      without waiting for the I/O to complete.</para>

      <para>For example, in the following snippet the exists() method returns
      a Future. When the Future completes (with a value of true if the file
      exists, or false if it doesn’t), the function specified to then()
      executes.</para>

      <programlisting>// Respond to HTTP requests for static files.
onRequest(HttpRequest request, HttpResponse response) {
  //...
  file.exists().then((found) {
    if (found) {
      // ...Respond with the file’s contents...
    } else {
      // ...Send a 404 response...
    }
  });      </programlisting>

      <para>See <xref linkend="ch03-asynchronous-programming" /> for more
      information about using Future, and <xref
      linkend="ch03-files-and-directories" /> for details on file and
      directory I/O.</para>
    </sect2>

    <sect2>
      <title>Managing WebSocket connections</title>

      <para>In addition to serving static files, the chat server manages
      WebSocket connections, routing chat messages between clients. The
      dart:io WebSocketHandler class accepts HTTP connections, converts them
      into WebSocket connections, and then passes them to ChatHandler.</para>

      <programlisting>runServer(String basePath, int port) {
  //...
  WebSocketHandler wsHandler = new WebSocketHandler();
  wsHandler.onOpen = new ChatHandler(basePath).onOpen;
}      </programlisting>

      <para>ChatHandler is a custom class that takes care of all WebSocket
      communication for the chat server. Here is its implementation.</para>

      <programlisting>class ChatHandler {
  Set&lt;WebSocketConnection&gt; connections;
  //...
  onOpen(WebSocketConnection conn) {
    connections.add(conn);

    conn.onClosed = (int status, String reason) {
      connections.remove(conn);
    };

    conn.onMessage = (message) {
      connections.forEach((connection) {
        if (conn != connection) {
          //...
          connection.send(message));
        }
      });
    };

    conn.onError = (e) {
      connections.remove(conn);
    };
  }
}      </programlisting>

      <para>When a client connects, the server adds the client’s WebSocket
      connection to a collection. When the client disconnects (either through
      an error or on purpose), the server removes that client’s connection
      from the collection. When a new message arrives, the server sends the
      message to all connected clients except the original source.</para>
    </sect2>

    <sect2>
      <title>Logging messages to a file</title>

      <para>The chat server logs data to a file, client/chat-log.txt, using a
      custom library implemented in file-logger.dart. This library uses an
      isolate to handle file I/O without tying up the root isolate. Here’s the
      code that creates and starts this isolate:</para>

      <programlisting>SendPort _loggingPort = spawnFunction(startLogging);      </programlisting>

      <para>The value returned by dart:isolate’s spawnFunction() is a SendPort
      object. Because isolates share no data, messages sent to ports are the
      only way for the root isolate to communicate with the spawned
      isolate.</para>

      <para>The argument to spawnFunction() points to the startLogging()
      function, which implements the logging isolate. The logic for the
      logging isolate is simple: the first message specifies the log file
      location, and subsequent messages provide data to write to the log
      file.</para>

      <programlisting>startLogging() {
  print('started logger');
  File logFile;
  OutputStream out;
  port.receive((msg, replyTo) {
    if (logFile == null) {
      print('Opening file $msg');
      logFile = new File(msg);
      out = logFile.openOutputStream(FileMode.APPEND);
    } else {
      time('write to file', () {
        out.writeString('${new Date.now()} : $msg\n');
      });
    }
  });
}      </programlisting>

      <para>In the preceding code, the port property used by startLogging()
      refers to a ReceivePort provided by dart:isolate. The port is how this
      isolate gets data from the root isolate. If this isolate needed to send
      messages back to the root isolate, it could use the replyTo argument (a
      SendPort) to do so.</para>

      <para>Recall that in the root isolate, the _loggingPort variable holds a
      SendPort that the root isolate uses to send messages to the logging
      isolate. Every time the chat server calls the log() method, the root
      isolate sends the log data:</para>

      <programlisting>void log(String message) {
  _loggingPort.send(message);
}     </programlisting>

      <para>See <xref
      linkend="ch03-dartisolate---concurrency-with-isolates" /> for more
      information about using isolates.</para>
    </sect2>
  </sect1>

  <sect1 id="ch05-what-next">
    <title>What next?</title>

    <para>You’ve seen how the Dart Chat sample uses both server-side and
    client-side Dart code to implement a web app. Here are some other samples
    you might want to look at:</para>

    <itemizedlist>
      <listitem>
        <simpara><ulink
        url="https://code.google.com/p/dart/source/browse/#svn%2Ftrunk%2Fdart%2Fsamples%2Fsolar">
        Solar,</ulink> which simulates the solar system with animations in a
        canvas, using requestAnimationFrame().</simpara>
      </listitem>

      <listitem>
        <simpara><ulink
        url="https://code.google.com/p/dart/source/browse/#svn%2Ftrunk%2Fdart%2Fsamples%2Fspirodraw">
        Spirodraw,</ulink> a fun, interactive tool to build colorful works of
        art.</simpara>
      </listitem>
    </itemizedlist>

    <para>Finally, please visit our website and join the discussion. We look
    forward to hearing from you!</para>

    <itemizedlist>
      <listitem>
        <simpara><ulink url="http://www.dartlang.org">Dart
        website</ulink></simpara>
      </listitem>

      <listitem>
        <simpara><ulink url="http://www.dartlang.org/mailing-list"> Dart
        discussion group</ulink></simpara>
      </listitem>

      <listitem>
        <simpara><ulink url="http://stackoverflow.com/tags/dart"> Dart
        questions on Stack Overflow</ulink></simpara>
      </listitem>
    </itemizedlist>
  </sect1>
</chapter>